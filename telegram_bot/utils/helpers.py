from datetime import datetime
import re
from typing import Optional, Tuple

async def validate_input(buffer: str, input_type: str) -> Tuple[bool, Optional[str]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    try:
        if input_type == 'distance':
            value = float(buffer)
            if value <= 0 or value > 100:
                return False, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è"
            return True, f"{value:.2f}"
            
        elif input_type == 'time':
            if not re.match(r'^\d{2}:\d{2}:\d{2}$', buffer):
                return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (—á—á:–º–º:—Å—Å)"
            h, m, s = map(int, buffer.split(':'))
            if h > 23 or m > 59 or s > 59:
                return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è"
            return True, buffer
            
        elif input_type == 'pace':
            if not re.match(r'^\d{1}:\d{2}$', buffer):
                return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–º–ø–∞ (–º:—Å—Å)"
            m, s = map(int, buffer.split(':'))
            if s >= 60:
                return False, "–°–µ–∫—É–Ω–¥—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 59"
            return True, buffer
            
        elif input_type == 'heart_rate':
            value = int(buffer)
            if value < 40 or value > 220:
                return False, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É–ª—å—Å–∞"
            return True, str(value)
            
    except ValueError:
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
    
    return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–≤–æ–¥–∞"

def format_training_summary(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."""
    summary = [
        "üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n",
        f"üìÖ –î–∞—Ç–∞: {data['date']}",
        f"üèÉ –¢–∏–ø: {data['training_type_name']}"
    ]
    
    if data['training_type'] != 'rest':
        summary.extend([
            f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {data['distance']} –∫–º",
            f"‚è± –í—Ä–µ–º—è: {data['time']}",
            f"üèÉ –¢–µ–º–ø: {data['pace']} –º–∏–Ω/–∫–º",
            f"‚ù§Ô∏è –ü—É–ª—å—Å: {data['heart_rate']} —É–¥/–º–∏–Ω"
        ])
    
    summary.extend([
        f"‚úçÔ∏è –î–æ–ø. –∏–Ω—Ñ–æ: {data['additional_info']}",
        f"ü§î –û—â—É—â–µ–Ω–∏—è: {data['sensations']}"
    ])
    
    return "\n".join(summary)

def handle_digit_input(buffer: str, char: str, input_type: str) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ü–∏—Ñ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    if input_type == 'distance':
        if len(buffer) >= 5:  # –ú–∞–∫—Å–∏–º—É–º 99.99
            return buffer
        if len(buffer) == 2 and '.' not in buffer:
            buffer += '.'
            
    elif input_type == 'time':
        if len(buffer) >= 8:  # –ú–∞–∫—Å–∏–º—É–º 23:59:59
            return buffer
        if len(buffer) in [2, 5]:
            buffer += ':'
            
    elif input_type == 'pace':
        if len(buffer) >= 4:  # –ú–∞–∫—Å–∏–º—É–º 9:59
            return buffer
        if len(buffer) == 1:
            buffer += ':'
            
    elif input_type == 'heart_rate':
        if len(buffer) >= 3:  # –ú–∞–∫—Å–∏–º—É–º 999
            return buffer
            
    return buffer + char

async def calculate_pace(distance: float, time_str: str) -> Optional[str]:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–º–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∏."""
    try:
        h, m, s = map(int, time_str.split(':'))
        total_seconds = h * 3600 + m * 60 + s
        pace_seconds = total_seconds / float(distance)
        pace_minutes = pace_seconds / 60
        pace_min = int(pace_minutes)
        pace_sec = int((pace_minutes - pace_min) * 60)
        return f"{pace_min}:{pace_sec:02d}"
    except:
        return None
