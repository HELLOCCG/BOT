from aiogram import Router, F, types
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from states.training import TrainingStates
from config.constants import TRAINING_TYPES
from keyboards.inline import get_training_types_keyboard, get_skip_button
from keyboards.reply import get_main_keyboard
from services.google_sheets import sheets_service
import re

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "üìä –û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É")
async def show_table(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞ —Ç–∞–±–ª–∏—Ü—ã"""
    table_url = sheets_service.get_table_url()
    await message.answer(f"üìä –í–∞—à–∞ —Ç–∞–±–ª–∏—Ü–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n{table_url}")

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def add_training(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await message.answer(
        "üèÉ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        reply_markup=get_training_types_keyboard()
    )

@router.callback_query(F.data.startswith("training_type:"))
async def process_training_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    training_type = callback.data.split(":")[1]
    
    await state.update_data(
        training_type=training_type,
        training_type_name=TRAINING_TYPES[training_type]
    )
    await state.set_state(TrainingStates.waiting_for_distance)
    
    await callback.message.edit_text(
        "üìè –í–≤–µ–¥–∏—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5.2):"
    )

@router.message(TrainingStates.waiting_for_distance)
async def process_distance(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏"""
    try:
        distance = float(message.text.replace(',', '.'))
        if distance <= 0:
            await message.answer("‚ùå –î–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return
        
        await state.update_data(distance=distance)
        await state.set_state(TrainingStates.waiting_for_pace)
        
        await message.answer(
            "‚è± –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú:–°–°/–∫–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4:30):",
            reply_markup=types.ReplyKeyboardRemove()
        )
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

@router.message(TrainingStates.waiting_for_pace)
async def process_pace(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–º–ø–∞"""
    pace_pattern = re.compile(r'^\d{1,2}:\d{2}$')
    if not pace_pattern.match(message.text):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–ú:–°–°)!"
        )
        return

    minutes, seconds = map(int, message.text.split(':'))
    if seconds >= 60:
        await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 59!")
        return

    data = await state.get_data()
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    total_minutes = (minutes + seconds/60) * data['distance']
    
    await state.update_data(
        pace=f"{message.text}/–∫–º",
        time=round(total_minutes, 2)
    )
    
    await state.set_state(TrainingStates.waiting_for_pulse)
    await message.answer("‚ù§Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å (—É–¥/–º–∏–Ω):")

@router.message(TrainingStates.waiting_for_pulse)
async def process_pulse(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—É–ª—å—Å–∞"""
    try:
        pulse = int(message.text)
        if not 30 <= pulse <= 250:
            await message.answer("‚ùå –ü—É–ª—å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 30-250!")
            return
        
        await state.update_data(pulse=pulse)
        await state.set_state(TrainingStates.waiting_for_additional)
        
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:",
            reply_markup=get_skip_button()
        )
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")

@router.message(TrainingStates.waiting_for_additional)
async def process_additional(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    additional_info = message.text
    await state.update_data(additional_info=additional_info)
    await state.set_state(TrainingStates.waiting_for_feelings)
    
    await message.answer(
        "ü§î –û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –æ—â—É—â–µ–Ω–∏—è:",
        reply_markup=get_skip_button()
    )

@router.callback_query(F.data == "skip")
async def process_skip(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞"""
    current_state = await state.get_state()
    
    if current_state == TrainingStates.waiting_for_additional:
        await state.update_data(additional_info="-")
        await state.set_state(TrainingStates.waiting_for_feelings)
        await callback.message.edit_text(
            "ü§î –û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –æ—â—É—â–µ–Ω–∏—è:",
            reply_markup=get_skip_button()
        )
    
    elif current_state == TrainingStates.waiting_for_feelings:
        await state.update_data(feelings="-")
        data = await state.get_data()
        success = await sheets_service.append_row(data)
        
        if success:
            await callback.message.edit_text(
                "‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
                f"–¢–∏–ø: {data['training_type_name']}\n"
                f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {data['distance']} –∫–º\n"
                f"–¢–µ–º–ø: {data['pace']}\n"
                f"–í—Ä–µ–º—è: {data['time']} –º–∏–Ω\n"
                f"–ü—É–ª—å—Å: {data['pulse']} —É–¥/–º–∏–Ω\n"
                f"–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {data['additional_info']}\n"
                f"–û—â—É—â–µ–Ω–∏—è: {data['feelings']}"
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        
        await state.clear()
    
    await callback.answer()

@router.message(TrainingStates.waiting_for_feelings)
async def process_feelings(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ—â—É—â–µ–Ω–∏–π"""
    feelings = message.text
    data = await state.get_data()
    data['feelings'] = feelings
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
    success = await sheets_service.append_row(data)
    
    if success:
        await message.answer(
            "‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
            f"–¢–∏–ø: {data['training_type_name']}\n"
            f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {data['distance']} –∫–º\n"
            f"–¢–µ–º–ø: {data['pace']}\n"
            f"–í—Ä–µ–º—è: {data['time']} –º–∏–Ω\n"
            f"–ü—É–ª—å—Å: {data['pulse']} —É–¥/–º–∏–Ω\n"
            f"–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {data['additional_info']}\n"
            f"–û—â—É—â–µ–Ω–∏—è: {data['feelings']}"
        )
    else:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    await state.clear()
